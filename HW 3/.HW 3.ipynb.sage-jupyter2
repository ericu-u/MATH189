{"backend_state":"running","kernel":"ir","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":76529664},"metadata":{"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.6.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"1c65d1","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b64600","input":"","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c90517","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"db9812","input":"","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"cf6493","input":"# Eric Liu\n# Eric Wang\n# Austin Du","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"71d80a","input":"ggplot(combined_sim_data, aes(x, color=trial)) +\n     stat_ecdf(geom=\"step\")","output":{"0":{"data":{"image/png":"8dc1b7fc42bbcce82940a189011e0d8919a3ec41","text/plain":"plot without title"},"exec_count":10,"output_type":"execute_result"}},"pos":20,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"7d0bbd","input":"# function to compute the probability of a single region having exactly k palindromes\npois_prob = function(lambda, k) {\n    return( ((lambda^k) / factorial(k)) * (exp(1) ^ (-lambda)) )\n}","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"cea346","input":"# Create a function that splits the data into num_bins intervals, finds palindrome frequency within each interval, and calculates the p-value for a chi-squared test \n# for homogeneity\n\nchisq_pvalue = function(num_bins){\n    # count frequencies within each interval\n    freqs = as.data.frame(table(cut(dna$location, breaks=seq(0, DNA_LENGTH, by=DNA_LENGTH/num_bins))))\n    # calculate expected frequency of interval from total number of palindromes\n    expected = NUM_PALINDROMES/nrow(freqs)\n    freqs$expected = expected\n    # calculate (O-E)^2/E\n    freqs$stat = ((freqs$Freq - freqs$expected) ^ 2) / freqs$expected\n    # sum together to find the chi-squared statistic\n    chisq_stat = sum(freqs$stat)\n    # calculate p-value from chi-squared distribution\n    return (pchisq(chisq_stat, df=nrow(freqs)-1, lower.tail=F))\n}","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"99b4aa","input":"# # use interval length 4000\n# INTERVAL_LENGTH = 4000\n# NUM_REGIONS = as.integer(DNA_LENGTH / INTERVAL_LENGTH)\n\n# # get the bins and counts\n# bins_counts = as.data.frame(table(cut(dna$location, breaks=seq(0, DNA_LENGTH, by=INTERVAL_LENGTH))))\n\n# # estimate lambda from the bins and counts\n# lambda = NUM_PALINDROMES / NUM_REGIONS\n\n\n# # the below block of code throws an annoying warning so turn them off temporarily\n# options(warn=-1)\n\n# # get the frequency of each palindrome count and group up some rows\n# bins_counts = bins_counts %>% count(Freq, Var1)\n# bins_counts = aggregate(bins_counts$n, by=list(Freq=bins_counts$Freq), FUN=sum)\n# bins_counts$Freq[bins_counts$Freq <= 2] = \"0-2\"\n# bins_counts$Freq[as.integer(bins_counts$Freq) >= 9] = \"9+\"\n# bins_counts = with(bins_counts, aggregate(list(x=x), list(Freq=Freq), sum))\n\n# # the above block of code throws an annoying warning so turn them back on\n# options(warn=0)","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"de8b13","input":"# # compute the pois probs for each category\n# zero_to_two = pois_prob(lambda, 0) + pois_prob(lambda, 1) + pois_prob(lambda, 2)\n# nine_plus = 0\n# for(i in 9:100) {\n#     # note this converges pretty quickly so going to only 100 is ok\n#     nine_plus = nine_plus + pois_prob(gamma, i)\n# }\n# all_others = c(zero_to_two)\n# for(i in 3:8) {\n#     all_others = c(all_others, pois_prob(gamma, i))\n# }\n# all_others = c(all_others, nine_plus)\n\n# # get the expected values by multipling the prob by the number of intervals\n# expected_values = all_others * NUM_REGIONS\n\n# # add the expected values as a new column in the bins_counts df\n# bins_counts$expected = expected_values\n\n# # compute the chi squared statistic\n# bins_counts$chi_sq = ((bins_counts$x - bins_counts$expected) ^ 2) / bins_counts$expected\n# chi_squared = sum(bins_counts$chi_sq)\n\n# # get the p value for the chi-squared test\n# pchisq(chi_squared, df=7, lower.tail=F)","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c575e4","input":"chisq_pvalue(10)","output":{"0":{"data":{"text/html":"0.902295090821097","text/latex":"0.902295090821097","text/markdown":"0.902295090821097","text/plain":"[1] 0.9022951"},"exec_count":16,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"bf5d91","input":"chisq_pvalue(20)","output":{"0":{"data":{"text/html":"0.527860332119311","text/latex":"0.527860332119311","text/markdown":"0.527860332119311","text/plain":"[1] 0.5278603"},"exec_count":17,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"d3db17","input":"chisq_pvalue(30)","output":{"0":{"data":{"text/html":"0.0732835870345071","text/latex":"0.0732835870345071","text/markdown":"0.0732835870345071","text/plain":"[1] 0.07328359"},"exec_count":18,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"cfe1e3","input":"chisq_pvalue(40)","output":{"0":{"data":{"text/html":"0.764316876621179","text/latex":"0.764316876621179","text/markdown":"0.764316876621179","text/plain":"[1] 0.7643169"},"exec_count":19,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e7f889","input":"library(\"ggplot2\")\nlibrary(\"gridExtra\")\nlibrary(\"dplyr\")","output":{"0":{"name":"stderr","output_type":"stream","text":"\nAttaching package: ‘dplyr’\n\n"},"1":{"name":"stderr","output_type":"stream","text":"The following object is masked from ‘package:gridExtra’:\n\n    combine\n\n"},"2":{"name":"stderr","output_type":"stream","text":"The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n"},"3":{"name":"stderr","output_type":"stream","text":"The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"33f8a3","input":"pvalue = function(lambda, stat, num_intervals){\n    cd = 0\n    for (k in 0:stat-1){\n        cd = cd + dpois(k, lambda)\n    }\n    return (1 - (cd^num_intervals))\n}","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"00eff4","input":"# Use DNA sequence to calculate statistic (largest cluster size) for various interval sizes.\ninterval_counts = c(400, \n300, 200, 100, 75, 50, 20, 10, 5)\ninterval_sizes = DNA_LENGTH / interval_counts\n\nprint('Use the following interval sizes:')\nprint(round(interval_sizes))","output":{"0":{"name":"stdout","output_type":"stream","text":"[1] \"Use the following interval sizes:\"\n"},"1":{"name":"stdout","output_type":"stream","text":"[1]   573   765  1147  2294  3058  4587 11468 22935 45871\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"93ef0d","input":"# Define a function that calculates the size of the largest cluster, given an interval size\ncalculate_stat <- function(interval_length){\n        counts = as.data.frame(table(cut(dna$location, breaks=seq(0, DNA_LENGTH, by=interval_length))))\n    return (max(counts$Freq))\n}\n# Compile statistics into a list\nmaxes = lapply(interval_sizes, FUN = calculate_stat)","output":{"0":{"data":{"text/html":"<ol>\n\t<li>8</li>\n\t<li>10</li>\n\t<li>9</li>\n\t<li>13</li>\n\t<li>14</li>\n\t<li>15</li>\n\t<li>23</li>\n\t<li>34</li>\n\t<li>63</li>\n</ol>\n","text/latex":"\\begin{enumerate}\n\\item 8\n\\item 10\n\\item 9\n\\item 13\n\\item 14\n\\item 15\n\\item 23\n\\item 34\n\\item 63\n\\end{enumerate}\n","text/markdown":"1. 8\n2. 10\n3. 9\n4. 13\n5. 14\n6. 15\n7. 23\n8. 34\n9. 63\n\n\n","text/plain":"[[1]]\n[1] 8\n\n[[2]]\n[1] 10\n\n[[3]]\n[1] 9\n\n[[4]]\n[1] 13\n\n[[5]]\n[1] 14\n\n[[6]]\n[1] 15\n\n[[7]]\n[1] 23\n\n[[8]]\n[1] 34\n\n[[9]]\n[1] 63\n"},"exec_count":22,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"79bfde","input":"# Compute p-values for various interval sizes\nfor (i in 1:length(interval_counts)){\n    cat('p-value for intervals of size', round(interval_sizes[i]), '(', interval_counts[i], 'intervals): ', '\\t', pvalue(NUM_PALINDROMES / interval_counts[i],  unlist(maxes[i]), interval_counts[i]), '\\n')\n}","output":{"0":{"name":"stdout","output_type":"stream","text":"p-value for intervals of size 573 ( 400 intervals):  \t 0.0004632764 \np-value for intervals of size 765 ( 300 intervals):  \t 2.958189e-05 \np-value for intervals of size 1147 ( 200 intervals):  \t 0.004991424 \np-value for intervals of size 2294 ( 100 intervals):  \t 0.00140579 \np-value for intervals of size 3058 ( 75 intervals):  \t 0.004968672 \np-value for intervals of size 4587 ( 50 intervals):  \t 0.05974615 \np-value for intervals of size 11468 ( 20 intervals):  \t 0.4432636 \np-value for intervals of size 22935 ( 10 intervals):  \t 0.9286922 \np-value for intervals of size 45871 ( 5 intervals):  \t 0.8625676 \n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"8dcfc9","input":"# CONSTANTS FOR THESE GRAPHS\nHIST_X_LIM = 6000\nHIST_Y_LIM = 65\n\n# compute simulated data\nsimulated_one_diff = list()\nfor(i in 1:5) {\n    forward = unlist(c(0, simulated[i]))\n    backward = unlist(c(simulated[i], 0))\n    simulated_one_diff[[i]] = (backward - forward)[2:(NUM_PALINDROMES)]\n}\n\n# compute actual data\nforward = unlist(c(0, dna_sorted))\nbackward = unlist(c(dna_sorted, 0))\ndna_one_diff = (backward - forward)[2:(NUM_PALINDROMES)]\n\n# graph the data\n\n# combine simulated data with actual data\none_diff_data = data.frame(x=c(dna_one_diff, unlist(simulated_one_diff)),\n    trial=factor(rep(c(\"actual\", \"1\", \"2\", \"3\", \"4\", \"5\"),\n    c(295, 295, 295, 295, 295, 295))))\n\n# # plot the cdfs for all trials and the actual data\n# ggplot(one_diff_data, aes(x, color=trial)) +\n#     stat_ecdf(geom=\"step\")\n\n# get the theoretical exponental distribution\nexpon_x = seq(0, HIST_X_LIM, length.out=N_POINTS)\nexpon_theoretical = data.frame(x=expon_x, px=dexp(expon_x, rate=NUM_PALINDROMES/DNA_LENGTH) * N_POINTS)\n\n# plot the histograms for all trials and the actual data\none_diff_actual_hist = ggplot(data.frame(dna_one_diff), aes(x=dna_one_diff)) +\n    geom_histogram(bins=30, fill=\"white\", color=\"black\") +\n    geom_line(data=expon_theoretical, aes(x=x, y=px), color=\"red\") +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between Sequential\\nPalindromes in CMV\", x=\"Difference\", y=\"Count\")\none_diff_trial_hist = ggplot(subset(one_diff_data, trial!=\"actual\"), aes(x, fill=trial)) +\n    geom_histogram(bins=30, color=\"black\", position=\"identity\") +\n    facet_grid(trial~.) +\n    geom_line(data=expon_theoretical, aes(x=x, y=px), color=\"red\", inherit.aes=F) +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between Sequential\\nPalindromes in Simulated Data\", x=\"Difference\", y=\"Count\")\ngrid.arrange(one_diff_actual_hist, one_diff_trial_hist, ncol=2)","output":{"0":{"data":{"image/png":"d13321a24c79f7211377d4332ab4882052c46980","text/plain":"plot without title"},"exec_count":25,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"5c3fe1","input":"# CONSTANTS FOR THESE GRAPHS\nHIST_X_LIM = 7500\nHIST_Y_LIM = 45\n\n# compute simulated data\nsimulated_two_diff = list()\nfor(i in 1:5) {\n    forward = unlist(c(0, 0, simulated[i]))\n    backward = unlist(c(simulated[i], 0, 0))\n    simulated_two_diff[[i]] = (backward - forward)[3:(NUM_PALINDROMES)]\n}\n\n# compute actual data\nforward = unlist(c(0, 0, dna_sorted))\nbackward = unlist(c(dna_sorted, 0, 0))\ndna_two_diff = (backward - forward)[3:(NUM_PALINDROMES)]\n\n# graph the data\n\n# combine simulated data with actual data\ntwo_diff_data = data.frame(x=c(dna_two_diff, unlist(simulated_two_diff)),\n    trial=factor(rep(c(\"actual\", \"1\", \"2\", \"3\", \"4\", \"5\"),\n    c(294, 294, 294, 294, 294, 294))))\n\n# # plot the cdfs for all trials and the actual data\n# ggplot(two_diff_data, aes(x, color=trial)) +\n#     stat_ecdf(geom=\"step\")\n\n# get the theoretical gamma distribution\ngamma2_x = seq(0, HIST_X_LIM, length.out=N_POINTS)\ngamma2_theoretical = data.frame(x=gamma2_x, px=dgamma(gamma2_x, shape = 2,rate=NUM_PALINDROMES/DNA_LENGTH) * (NUM_PALINDROMES* HIST_X_LIM/30))\n\n# plot the histograms for all trials and the actual data\ntwo_diff_actual_hist = ggplot(data.frame(dna_two_diff), aes(x=dna_two_diff)) +\n    geom_histogram(bins=30, fill=\"white\", color=\"black\") +\n    geom_line(data=gamma2_theoretical, aes(x=x, y=px), color=\"red\") +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between One Inbetween\\nPalindromes in CMV\", x=\"Difference\", y=\"Count\")\ntwo_diff_trial_hist = ggplot(subset(two_diff_data, trial!=\"actual\"), aes(x, fill=trial)) +\n    geom_histogram(bins=30, color=\"black\", position=\"identity\") +\n    facet_grid(trial~.) +\n    geom_line(data=gamma2_theoretical, aes(x=x, y=px), color=\"red\", inherit.aes=F) +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between One Inbetween\\nPalindromes in Simulated Data\", x=\"Difference\", y=\"Count\")\ngrid.arrange(two_diff_actual_hist, two_diff_trial_hist, ncol=2)","output":{"0":{"data":{"image/png":"27f29bdfde2a3576479084aeb2ba98825ba1dfe6","text/plain":"plot without title"},"exec_count":26,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"2260b4","input":"dna = read.table(\"./hcmv.txt\", sep=\"\", header=T)\nhead(dna)","output":{"0":{"data":{"text/html":"<table>\n<caption>A data.frame: 6 × 1</caption>\n<thead>\n\t<tr><th></th><th scope=col>location</th></tr>\n\t<tr><th></th><th scope=col>&lt;int&gt;</th></tr>\n</thead>\n<tbody>\n\t<tr><th scope=row>1</th><td> 177</td></tr>\n\t<tr><th scope=row>2</th><td>1321</td></tr>\n\t<tr><th scope=row>3</th><td>1433</td></tr>\n\t<tr><th scope=row>4</th><td>1477</td></tr>\n\t<tr><th scope=row>5</th><td>3248</td></tr>\n\t<tr><th scope=row>6</th><td>3255</td></tr>\n</tbody>\n</table>\n","text/latex":"A data.frame: 6 × 1\n\\begin{tabular}{r|l}\n  & location\\\\\n  & <int>\\\\\n\\hline\n\t1 &  177\\\\\n\t2 & 1321\\\\\n\t3 & 1433\\\\\n\t4 & 1477\\\\\n\t5 & 3248\\\\\n\t6 & 3255\\\\\n\\end{tabular}\n","text/markdown":"\nA data.frame: 6 × 1\n\n| <!--/--> | location &lt;int&gt; |\n|---|---|\n| 1 |  177 |\n| 2 | 1321 |\n| 3 | 1433 |\n| 4 | 1477 |\n| 5 | 3248 |\n| 6 | 3255 |\n\n","text/plain":"  location\n1  177    \n2 1321    \n3 1433    \n4 1477    \n5 3248    \n6 3255    "},"exec_count":3,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"c3f85a","input":"# CONSTANTS FOR THESE GRAPHS\nHIST_X_LIM = 8000\nHIST_Y_LIM = 40\n\n# compute simulated data\nsimulated_three_diff = list()\nfor(i in 1:5) {\n    forward = unlist(c(0, 0, 0, simulated[i]))\n    backward = unlist(c(simulated[i], 0, 0, 0))\n    simulated_three_diff[[i]] = (backward - forward)[4:(NUM_PALINDROMES)]\n}\n\n# compute actual data\nforward = unlist(c(0, 0, 0, dna_sorted))\nbackward = unlist(c(dna_sorted, 0, 0, 0))\ndna_three_diff = (backward - forward)[4:(NUM_PALINDROMES)]\n\n# graph the data\n\n# combine simulated data with actual data\nthree_diff_data = data.frame(x=c(dna_three_diff, unlist(simulated_three_diff)),\n    trial=factor(rep(c(\"actual\", \"1\", \"2\", \"3\", \"4\", \"5\"),\n    c(293, 293, 293, 293, 293, 293))))\n\n# # plot the cdfs for all trials and the actual data\n# ggplot(three_diff_data, aes(x, color=trial)) +\n#     stat_ecdf(geom=\"step\")\n\n# get the theoretical exponental distribution\ngamma3_x = seq(0, HIST_X_LIM, length.out=N_POINTS)\ngamma3_theoretical = data.frame(x=gamma3_x, px=dgamma(gamma3_x, shape = 3, rate=NUM_PALINDROMES/DNA_LENGTH) * (NUM_PALINDROMES* 300))\n\n# plot the histograms for all trials and the actual data\nthree_diff_actual_hist = ggplot(data.frame(dna_three_diff), aes(x=dna_three_diff)) +\n    geom_histogram(bins=30, fill=\"white\", color=\"black\") +\n    geom_line(data=gamma3_theoretical, aes(x=x, y=px), color=\"red\") +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between Three Inbetween\\nPalindromes in CMV\", x=\"Difference\", y=\"Count\")\nthree_diff_trial_hist = ggplot(subset(three_diff_data, trial!=\"actual\"), aes(x, fill=trial)) +\n    geom_histogram(binwidth = 300, color=\"black\", position=\"identity\") +\n    facet_grid(trial~.) +\n    geom_line(data=gamma3_theoretical, aes(x=x, y=px), color=\"red\", inherit.aes=F) +\n    coord_cartesian(xlim=c(0, HIST_X_LIM), ylim=c(0,HIST_Y_LIM)) +\n    labs(title=\"Difference Between Three Inbetween\\nPalindromes in Simulated Data\", x=\"Difference\", y=\"Count\")\ngrid.arrange(three_diff_actual_hist, three_diff_trial_hist, ncol=2)","output":{"0":{"data":{"image/png":"9b7d1f7471ad4645be4527d2f11c2d1b2db07aed","text/plain":"plot without title"},"exec_count":35,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"69a81a","input":"# create some constants for usage in code\n\n# constants about dna dataset\nDNA_LENGTH = 229354\nNUM_PALINDROMES = 296\n\n# other constants\nN_POINTS = 50000","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"03037d","input":"###################################################################\n# WARNING: TRY YOUR VERY BEST TO NOT RUN THIS CELL AGAIN OR WE    #\n#          WILL LIKELY NEED TO REDO THE MANUAL X/Y LIMITS ON      #\n#          SOME OF THE GRAPHS                                     #\n###################################################################\n\n\n# generate five random uniform scatters\n\n# function to simulate one theoretical uniform distribution\nsim_unif = function() {\n    return(sort(as.integer(round(runif(n=NUM_PALINDROMES, min=1, max=DNA_LENGTH)))))\n}\n\n# simulate five times\nsimulated = list()\nsimulated[[1]] = sim_unif()\nsimulated[[2]] = sim_unif()\nsimulated[[3]] = sim_unif()\nsimulated[[4]] = sim_unif()\nsimulated[[5]] = sim_unif()","pos":8,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"006dfa","input":"# combine the simulated data with the actual data\ncombined_sim_data = data.frame(x=c(dna$location, unlist(simulated)),\n    trial=factor(rep(c(\"actual\", \"1\", \"2\", \"3\", \"4\", \"5\"),\n    c(NUM_PALINDROMES, NUM_PALINDROMES, NUM_PALINDROMES, NUM_PALINDROMES, NUM_PALINDROMES, NUM_PALINDROMES))))\n\n# # plot the cdfs for all trials and the actual data\n# ggplot(combined_sim_data, aes(x, color=trial)) +\n#     stat_ecdf(geom=\"step\")\n\n# plot the histograms for all trials and the actual data\nactual_hist = ggplot(dna, aes(x=location)) +\n    geom_histogram(bins=30, fill=\"white\", color=\"black\") +\n    coord_cartesian(xlim=c(0, DNA_LENGTH), ylim=c(0,20)) +\n    labs(title=\"Hist of CMV Palindromes\", x=\"Palindrome Starting Base Pair\", y=\"Count\")\ntrial_hist = ggplot(subset(combined_sim_data, trial!=\"actual\"), aes(x, fill=trial)) +\n    geom_histogram(bins=30, color=\"black\", position=\"identity\") +\n    coord_cartesian(xlim=c(0, DNA_LENGTH), ylim=c(0,20)) +\n    labs(title=\"Hist of Simulated Palindromes\", x=\"Palindrome Starting Base Pair\", y=\"Count\")\ngrid.arrange(actual_hist, trial_hist, ncol=2)\n\n# TODO: make the graphs look pretty, add labels, etc.\n# https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf <- good reference","output":{"0":{"data":{"image/png":"beb383d781c9472f79d209d9ea0aef58343c593f","text/plain":"plot without title"},"exec_count":6,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3be075","input":"# first copy the dna data and sort it\ndna_sorted = sort(dna$location)","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"1d665e","input":"## Locations (aka random scatter in the slides)","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"29fd87","input":"#### Spacing Between Palindromes With One Inbetween (Offset = 2)","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"2f17a5","input":"#### Spacing Between Consecutive Palindromes (Offset = 1)","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"3075fa","input":"#### Chi-Squared Test for the Interval Length of 22935 (10 Non Overlapping Regions)","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"380b8d","input":"#### Imports","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"41d8cd","input":"#### Spacing Between Palindromes With Two Inbetween (Offset = 3)","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"584a7d","input":"## Counts","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"89a09a","input":"#### Load Data","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"94548e","input":"##### New version:","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"b56242","input":"#### Chi-Squared Test for the Interval Length of 11467 (20 Non Overlapping Regions)","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"bcb29f","input":"##### Theoretical Approach:\n\nAssume the null hypothesis, i.e. that palindromes occur according to a homogeneous Poisson process rather than clustering. When split into intervals of arbitrary size, we can count the number of palindromes in the most dense interval (the interval with the most occurences). Call this count of palindromes in the biggest cluster X. Below is a function, pvalue, that finds the probability that X is larger than a specified size i, i.e. P(X $\\geq$ i), given a rate parameter and interval count.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"cc037e","input":"#### Chi-Squared Test for the Interval Length of 5733 (40 Non Overlapping Regions)","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"d9f453","input":"## Spacings (aka locations and spacings in the slides)","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"eddc09","input":"#### Chi-Squared Test for the Interval Length of 7645 (30 Non Overlapping Regions)","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"f5bc2c","input":"# HW 3","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"f8857c","input":"## Biggest Cluster","pos":37,"type":"cell"}
{"id":0,"time":1590269676359,"type":"user"}
{"last_load":1590292896985,"type":"file"}