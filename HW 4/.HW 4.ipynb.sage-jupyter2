{"backend_state":"running","kernel":"ir","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":76316672},"metadata":{"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.6.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1590388520081,"exec_count":1,"id":"ed2346","input":"# Eric Liu\n# Eric Wang\n# Austin Du","kernel":"ir","pos":1,"start":1590388520007,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388521389,"exec_count":2,"id":"edc612","input":"library(\"ggplot2\")\nlibrary(\"gridExtra\")\nlibrary(\"dplyr\")\nlibrary(\"reshape2\")\nlibrary(\"visreg\")","kernel":"ir","output":{"0":{"name":"stderr","text":"\nAttaching package: ‘dplyr’\n\n"},"1":{"name":"stderr","text":"The following object is masked from ‘package:gridExtra’:\n\n    combine\n\n"},"2":{"name":"stderr","text":"The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n"},"3":{"name":"stderr","text":"The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n"}},"pos":3,"start":1590388520094,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388521470,"exec_count":3,"id":"e75b4d","input":"gauge = read.table(\"./gauge.txt\", sep=\"\", header=T)\ndensity = gauge$density\ngain = gauge$gain\nhead(gauge)","kernel":"ir","output":{"0":{"data":{"text/html":"<table>\n<caption>A data.frame: 6 × 2</caption>\n<thead>\n\t<tr><th></th><th scope=col>density</th><th scope=col>gain</th></tr>\n\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n</thead>\n<tbody>\n\t<tr><th scope=row>1</th><td>0.686</td><td>17.6</td></tr>\n\t<tr><th scope=row>2</th><td>0.686</td><td>17.3</td></tr>\n\t<tr><th scope=row>3</th><td>0.686</td><td>16.9</td></tr>\n\t<tr><th scope=row>4</th><td>0.686</td><td>16.2</td></tr>\n\t<tr><th scope=row>5</th><td>0.686</td><td>17.1</td></tr>\n\t<tr><th scope=row>6</th><td>0.686</td><td>18.5</td></tr>\n</tbody>\n</table>\n","text/latex":"A data.frame: 6 × 2\n\\begin{tabular}{r|ll}\n  & density & gain\\\\\n  & <dbl> & <dbl>\\\\\n\\hline\n\t1 & 0.686 & 17.6\\\\\n\t2 & 0.686 & 17.3\\\\\n\t3 & 0.686 & 16.9\\\\\n\t4 & 0.686 & 16.2\\\\\n\t5 & 0.686 & 17.1\\\\\n\t6 & 0.686 & 18.5\\\\\n\\end{tabular}\n","text/markdown":"\nA data.frame: 6 × 2\n\n| <!--/--> | density &lt;dbl&gt; | gain &lt;dbl&gt; |\n|---|---|---|\n| 1 | 0.686 | 17.6 |\n| 2 | 0.686 | 17.3 |\n| 3 | 0.686 | 16.9 |\n| 4 | 0.686 | 16.2 |\n| 5 | 0.686 | 17.1 |\n| 6 | 0.686 | 18.5 |\n\n","text/plain":"  density gain\n1 0.686   17.6\n2 0.686   17.3\n3 0.686   16.9\n4 0.686   16.2\n5 0.686   17.1\n6 0.686   18.5"}}},"pos":5,"start":1590388521403,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388521506,"exec_count":4,"id":"4da4c8","input":"# the unique densities of the blocks\nsort(unique(gauge$density))","kernel":"ir","output":{"0":{"data":{"text/html":"<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>0.001</li><li>0.08</li><li>0.148</li><li>0.223</li><li>0.318</li><li>0.412</li><li>0.508</li><li>0.604</li><li>0.686</li></ol>\n","text/latex":"\\begin{enumerate*}\n\\item 0.001\n\\item 0.08\n\\item 0.148\n\\item 0.223\n\\item 0.318\n\\item 0.412\n\\item 0.508\n\\item 0.604\n\\item 0.686\n\\end{enumerate*}\n","text/markdown":"1. 0.001\n2. 0.08\n3. 0.148\n4. 0.223\n5. 0.318\n6. 0.412\n7. 0.508\n8. 0.604\n9. 0.686\n\n\n","text/plain":"[1] 0.001 0.080 0.148 0.223 0.318 0.412 0.508 0.604 0.686"}}},"pos":6,"start":1590388521478,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388521534,"exec_count":5,"id":"49c9e0","input":"# function to print out the equation of the line and the sum of squared residuals\nsummarize_fit = function(line) {\n    cat(\"intercept:\\t\\t\", line$coefficients[1], \"\\n\")\n    cat(\"slope:\\t\\t\\t\", line$coefficients[2], \"\\n\")\n    cat(\"sum squared residuals:\\t\", sum(resid(line)^2), \"\\n\")\n    cat(\"r squared:\\t\\t\", summary(line)$r.squared)\n}","kernel":"ir","pos":8,"start":1590388521513,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388526278,"exec_count":6,"id":"331d4b","input":"# without any transformations, fit the data with linear regression and plot the residuals\nreg_plot = ggplot(gauge, aes(x=density, y=gain)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"Density vs Gain\", x=\"Density\", y=\"Gain\")\n\n# compute the residuals for the linear regression and plot\nlin_reg = lm(gauge$gain ~ gauge$density)\nresiduals = data.frame(x=gauge$density, resid=resid(lin_reg))\nresid_plot = ggplot(residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"Density vs Gain Residuals\", x=\"Density\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(reg_plot, resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 318.7015 \nslope:\t\t\t -531.9507 \nsum squared residuals:\t 291335 \nr squared:\t\t 0.8156974"},"1":{"data":{"image/png":"c24b5efd338a6c45072b432f8f4191759ee0c4b6","text/plain":"plot without title"}}},"pos":9,"start":1590388521541,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388527251,"exec_count":7,"id":"ef98ff","input":"# transform data (take the sqrt of y axis) and fit to linear regression\ngauge$sqrt_gain = sqrt(gauge$gain)\nreg_plot = ggplot(gauge, aes(x=density, y=sqrt_gain)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"Density vs Sqrt. Gain\", x=\"Density\", y=\"Square Root of Gain\")\n\n# compute the residuals for the linear regression and plot\nlin_reg = lm(gauge$sqrt_gain ~ gauge$density)\nresiduals = data.frame(x=gauge$density, resid=resid(lin_reg))\nresid_plot = ggplot(residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"Density vs Sqrt. Gain Residuals\", x=\"Density\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(reg_plot, resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 18.28919 \nslope:\t\t\t -23.02002 \nsum squared residuals:\t 175.6669 \nr squared:\t\t 0.9321839"},"1":{"data":{"image/png":"772387c77e1927c75b6e2e08f1f11ba2075534df","text/plain":"plot without title"}}},"pos":11,"start":1590388526287,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388528039,"exec_count":8,"id":"444ec2","input":"# transform data (take the cube root of y axis) and fit to linear regression\ngauge$cubert_gain = (gauge$gain)^(1/3)\nreg_plot = ggplot(gauge, aes(x=density, y=cubert_gain)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"Density vs Cbrt. of Gain\", x=\"Density\", y=\"Cube Root of Gain\")\n\n# compute the residuals for the linear regression and plot\nlin_reg = lm(gauge$cubert_gain ~ gauge$density)\nresiduals = data.frame(x=gauge$density, resid=resid(lin_reg))\nresid_plot = ggplot(residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"Density vs Cbrt. of Gain Residuals\", x=\"Density\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(reg_plot, resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 7.03021 \nslope:\t\t\t -7.004705 \nsum squared residuals:\t 8.76708 \nr squared:\t\t 0.9622668"},"1":{"data":{"image/png":"a14695c1042a1cd3e2ca050c13b241455736e860","text/plain":"plot without title"}}},"pos":13,"start":1590388527267,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388528969,"exec_count":9,"id":"8eb344","input":"# transform data (take the ln of y axis) and fit to linear regression\ngauge$ln_gain = log(gauge$gain)\nreg_plot = ggplot(gauge, aes(x=density, y=ln_gain)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"Density vs ln Gain\", x=\"Density\", y=\"Natural Log of Gain\")\n\n# compute the residuals for the linear regression and plot\nlin_reg = lm(gauge$ln_gain ~ gauge$density)\nresiduals = data.frame(x=gauge$density, resid=resid(lin_reg))\nresid_plot = ggplot(residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"Density vs ln Gain Residuals\", x=\"Density\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(reg_plot, resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 5.997265 \nslope:\t\t\t -4.605937 \nsum squared residuals:\t 0.4059345 \nr squared:\t\t 0.9958183"},"1":{"data":{"image/png":"16de3954057740f6c79291571722a7842978caa4","text/plain":"plot without title"}}},"pos":15,"start":1590388528046,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388529765,"exec_count":10,"id":"5a5655","input":"# transform data (take the sqrt of the ln of y axis) and fit to linear regression\ngauge$sqrt_ln_gain = sqrt(log(gauge$gain))\nreg_plot = ggplot(gauge, aes(x=density, y=sqrt_ln_gain)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"Density vs Sqrt. ln Gain\", x=\"Density\", y=\"Square Root of Natural Log of Gain\")\n\n# compute the residuals for the linear regression and plot\nlin_reg = lm(gauge$sqrt_ln_gain ~ gauge$density)\nresiduals = data.frame(x=gauge$density, resid=resid(lin_reg))\nresid_plot = ggplot(residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"Density vs Sqrt. ln Gain Residuals\", x=\"Density\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(reg_plot, resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 2.465989 \nslope:\t\t\t -1.105212 \nsum squared residuals:\t 0.01539044 \nr squared:\t\t 0.9972425"},"1":{"data":{"image/png":"36c96d1350984b04b9b51bbdef74df9531dc0b11","text/plain":"plot without title"}}},"pos":17,"start":1590388528978,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388530161,"exec_count":11,"id":"5b7436","input":"ggplot(residuals, aes(x=resid)) +\n    geom_density() +\n    labs(title=\"Density vs Sqrt. ln Gain Residuals Density Plot\", x=\"Residuals\", y=\"Density\")","kernel":"ir","output":{"0":{"data":{"image/png":"31e6ffed8f83cd5f06e36c8ff701a0ccada56e3c","text/plain":"plot without title"}}},"pos":18,"start":1590388529774,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388530682,"exec_count":12,"id":"e8e910","input":"m = -1.105212\nb = 2.465989\n\nf = function(x) exp(1)^((m * x + b)^2)\n\n# plot the original data but with our proposed regression line\nggplot(gauge, aes(x=density, y=gain)) +\n    geom_point() +\n    stat_function(fun=f, color=\"blue\") +\n    labs(title=\"Density vs Gain\", x=\"Density\", y=\"Gain\") +\n    annotate(geom=\"text\", x=.35, y=200, label=\"gain = e^((-1.1052 * density + 2.4660)^2)\", color=\"blue\")","kernel":"ir","output":{"0":{"data":{"image/png":"26663bbf032117cbbb8c28be4be9563337703cc1","text/plain":"plot without title"}}},"pos":19,"start":1590388530169,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388530814,"exec_count":13,"id":"177780","input":"# make a copy of the original df to not screw up anything later\n# since we will always need to take the log of gain, do so now\noriginal_df = data.frame(select(gauge, sqrt_ln_gain, density))\nhead(original_df)","kernel":"ir","output":{"0":{"data":{"text/html":"<table>\n<caption>A data.frame: 6 × 2</caption>\n<thead>\n\t<tr><th></th><th scope=col>sqrt_ln_gain</th><th scope=col>density</th></tr>\n\t<tr><th></th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n</thead>\n<tbody>\n\t<tr><th scope=row>1</th><td>1.693487</td><td>0.686</td></tr>\n\t<tr><th scope=row>2</th><td>1.688404</td><td>0.686</td></tr>\n\t<tr><th scope=row>3</th><td>1.681462</td><td>0.686</td></tr>\n\t<tr><th scope=row>4</th><td>1.668835</td><td>0.686</td></tr>\n\t<tr><th scope=row>5</th><td>1.684957</td><td>0.686</td></tr>\n\t<tr><th scope=row>6</th><td>1.708148</td><td>0.686</td></tr>\n</tbody>\n</table>\n","text/latex":"A data.frame: 6 × 2\n\\begin{tabular}{r|ll}\n  & sqrt\\_ln\\_gain & density\\\\\n  & <dbl> & <dbl>\\\\\n\\hline\n\t1 & 1.693487 & 0.686\\\\\n\t2 & 1.688404 & 0.686\\\\\n\t3 & 1.681462 & 0.686\\\\\n\t4 & 1.668835 & 0.686\\\\\n\t5 & 1.684957 & 0.686\\\\\n\t6 & 1.708148 & 0.686\\\\\n\\end{tabular}\n","text/markdown":"\nA data.frame: 6 × 2\n\n| <!--/--> | sqrt_ln_gain &lt;dbl&gt; | density &lt;dbl&gt; |\n|---|---|---|\n| 1 | 1.693487 | 0.686 |\n| 2 | 1.688404 | 0.686 |\n| 3 | 1.681462 | 0.686 |\n| 4 | 1.668835 | 0.686 |\n| 5 | 1.684957 | 0.686 |\n| 6 | 1.708148 | 0.686 |\n\n","text/plain":"  sqrt_ln_gain density\n1 1.693487     0.686  \n2 1.688404     0.686  \n3 1.681462     0.686  \n4 1.668835     0.686  \n5 1.684957     0.686  \n6 1.708148     0.686  "}}},"pos":22,"start":1590388530707,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388546045,"exec_count":14,"id":"fff04b","input":"# parameters\nN = 5000         # how many times to simulate\nV = .15          # range of variation for density (from -V to +V)\n\n# create lists to hold the simulated coefficients\nslopes = vector(\"list\", length=N)\nintercepts = vector(\"list\", length=N)\n\n# create a function to vary the density column by any amount between -V and +V\nvary_density = function(x) {\n    vary_amount = runif(n=1, min=-V, max=V) + 1\n    return(x * vary_amount)\n}\n\n# simulate N times\nfor(i in 1:N) {\n    # first create a copy of the original df so our changes don't carry over between iterations\n    copied_df = data.frame(original_df)\n\n    # modify the density column with the random variation\n    copied_df$density = unlist(lapply(copied_df$density, vary_density), use.names=F)\n\n    # do linear regression as before and record the coefficients\n    lin_reg = lm(sqrt_ln_gain ~ density, data=copied_df)\n    slopes[i] = lin_reg$coefficients[2]\n    intercepts[i] = lin_reg$coefficients[1]\n}","kernel":"ir","pos":23,"scrolled":true,"start":1590388530822,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388546118,"exec_count":15,"id":"2f4afe","input":"# WARNING: DO NOT UNCOMMENT AND RUN THIS CELL UNLESS YOU WANT TO HAVE TO\n# REDO THE CUSTOM TEXT ON THE FOLLOWING GRAPHS\n\n# # combine the lists into a single dataframe and save\n# to_save = do.call(rbind, Map(data.frame, slope=slopes, intercept=intercepts))\n# write.table(to_save, \"simulated_density_coefficients.txt\", sep=\" \", row.names=F)","kernel":"ir","pos":24,"start":1590388546106,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388548257,"exec_count":16,"id":"8902af","input":"# load the saved data\nsdc = read.table(\"./simulated_density_coefficients.txt\", sep=\"\", header=T)\n\n# plot the distribution of slopes and intercepts\nslope_plot = ggplot(sdc, aes(x=slope)) +\n    geom_density() +\n    geom_vline(aes(xintercept=mean(slope)), color=\"blue\") +\n    annotate(\"text\", label=paste(\"mean slope at \", round(mean(sdc$slope), digits=4)), x=mean(sdc$slope)+.005, y=10, angle=90) +\n    geom_vline(aes(xintercept=m), color=\"red\") +\n    annotate(\"text\", label=paste(\"actual slope at \", m), x=m+.005, y=5, angle=90) +\n    labs(title=\"Density Plot of Slope\", x=\"Slope\", y=\"Density\")\nintercept_plot = ggplot(sdc, aes(x=intercept)) +\n    geom_density() +\n    geom_vline(aes(xintercept=mean(intercept)), color=\"blue\") +\n    annotate(\"text\", label=paste(\"mean intercept at \", round(mean(sdc$intercept), digits=4)), x=mean(sdc$intercept)+.001, y=50, angle=90) +\n    geom_vline(aes(xintercept=b), color=\"red\") +\n    annotate(\"text\", label=paste(\"actual intercept at \", b), x=b+.001, y=50, angle=90) +\n    labs(title=\"Density Plot of Intercept\", x=\"Intercept\", y=\"Density\")\n\n# put both plots side by side\ngrid.arrange(slope_plot, intercept_plot, ncol=2)","kernel":"ir","output":{"0":{"data":{"image/png":"b0767de1713254ae2f978965bac41c83cd3da1a3","text/plain":"plot without title"}}},"pos":25,"start":1590388546128,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388548409,"exec_count":17,"id":"a48a64","input":"# constant for percent variation\nC = .01","kernel":"ir","pos":26,"start":1590388548388,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388548501,"exec_count":18,"id":"d41a9d","input":"# get the mean and standard deviation of simulated slope\nslope_mean = mean(sdc$slope)\nslope_std = sd(sdc$slope)\n\n# compute the probability of getting within C of the ovserved value\nabs(pnorm(m + (m * C), mean=slope_mean, sd=slope_std, lower.tail=T) - pnorm(m - (m * C), mean=slope_mean, sd=slope_std, lower.tail=T))","kernel":"ir","output":{"0":{"data":{"text/html":"0.204945332825012","text/latex":"0.204945332825012","text/markdown":"0.204945332825012","text/plain":"[1] 0.2049453"}}},"pos":27,"start":1590388548418,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388548592,"exec_count":19,"id":"960ab2","input":"# get the mean and standard deviation of simulated intercept\nintercept_mean = mean(sdc$intercept)\nintercept_std = sd(sdc$intercept)\n\n# compute the probability of getting within C of the ovserved value\nabs(pnorm(b + (b * C), mean=intercept_mean, sd=intercept_std, lower.tail=T) - pnorm(b - (b * C), mean=intercept_mean, sd=intercept_std, lower.tail=T))","kernel":"ir","output":{"0":{"data":{"text/html":"0.9999884698857","text/latex":"0.9999884698857","text/markdown":"0.9999884698857","text/plain":"[1] 0.9999885"}}},"pos":28,"start":1590388548511,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549545,"exec_count":20,"id":"7b31ea","input":"# create inverse plots for the above models (predicting density with gain)\n\n# transform data (take the sqrt(ln(#)) of y axis) and fit to linear regression\ngauge$sqrt_ln_gain = sqrt(log(gauge$gain))\ninv_reg_plot = ggplot(gauge, aes(x=sqrt_ln_gain, y=density)) +\n    geom_point() +\n    stat_smooth(method='lm', formula = y~x) +\n    labs(title=\"ln Gain vs Density\", y=\"Density\", x=\"Natural Log of Gain\")\n\n# compute the residuals for the linear regression and plot\ninv_lin_reg = lm(density ~ sqrt_ln_gain, data = gauge)\ninv_residuals = data.frame(x=gauge$sqrt_ln_gain, resid=resid(inv_lin_reg))\ninv_resid_plot = ggplot(inv_residuals, aes(x=x, y=resid)) +\n    geom_point() +\n    labs(title=\"ln Gain Residuals vs Density\", x=\"ln(Gain)\", y=\"Residuals\")\n\n# put both plots side by side\ngrid.arrange(inv_reg_plot, inv_resid_plot, ncol=2)\n\n# print out the equation of the line and the sum of squared residuals\nsummarize_fit(inv_lin_reg)","kernel":"ir","output":{"0":{"name":"stdout","text":"intercept:\t\t 2.225997 \nslope:\t\t\t -0.9023087 \nsum squared residuals:\t 0.01256495 \nr squared:\t\t 0.9972425"},"1":{"data":{"image/png":"03aa708138d3ee541edccba5bc1ac8ef3f1906f1","text/plain":"plot without title"}}},"pos":30,"start":1590388548651,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549595,"exec_count":21,"id":"c6d6f5","input":"# create a confidence interval for the regression line\n\n# find slope of regression line\nslope = inv_lin_reg$coefficients[[2]]\n\n# find standard deviation of slope\nmse = sum(inv_lin_reg$residuals^2)/(nrow(gauge)-2)\ndeviations = var(gauge$sqrt_ln_gain)*(nrow(gauge)-1)\nslope_sd = sqrt(mse/deviations)\n\n# create confidence interval for slope\nslope_me = qt(.975, nrow(gauge)-2, lower.tail = TRUE) * slope_sd\ncat(\"95% Confidence Interval for slope: (\", slope - slope_me, \",\", slope + slope_me, \")\\n\")\n\n\n\n# find y-int of regression line\nyint = inv_lin_reg$coefficients[[1]]\n\n# find standard deviation of y-int\nmeanx = mean(gauge$sqrt_ln_gain)\nyint_sd = sqrt(mse*(1/nrow(gauge) + meanx))\n\n# create confidence interval for y-intervept\nyint_me = qt(.975, nrow(gauge)-2, lower.tail = TRUE) * yint_sd\ncat(\"95% Confidence Interval for y-int: (\", yint - yint_me, \",\", yint + yint_me, \")\")","kernel":"ir","output":{"0":{"name":"stdout","text":"95% Confidence Interval for slope: ( -0.9123602 , -0.8922572 )\n"},"1":{"name":"stdout","text":"95% Confidence Interval for y-int: ( 2.191493 , 2.2605 )"}},"pos":31,"start":1590388549558,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549777,"exec_count":22,"id":"bfb74d","input":"# plot prediction interval with confidence bands\n\n# plot data and regression line\nnewx <- seq(1.6, 2.5, .9/89)\nplot(gauge$sqrt_ln_gain, gauge$density, ylim=c(0, .8), xlab=\"sqrt(log(Gain))\", ylab=\"Density\", main=\"Prediction Interval for Density\", pch = 20)\nabline(inv_lin_reg, col=\"lightblue\")\n\n# get upper and lower bounds for prediction interval of 90 points\nconf_interval <- predict(inv_lin_reg, newdata=data.frame(sqrt_ln_gain = newx), interval=\"prediction\",\n                         level = 0.95)\n# plot points around regression line\nlines(newx, conf_interval[,2], col=\"blue\", lty=2)\nlines(newx, conf_interval[,3], col=\"blue\", lty=2)","kernel":"ir","output":{"0":{"data":{"image/png":"c8e99076fdb76e9ddce587f0ee2e18bb62e62748","text/plain":"Plot with title “Prediction Interval for Density”"}}},"pos":32,"start":1590388549604,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549813,"exec_count":23,"id":"ca03ea","input":"# create a function that produces a prediction interval for density, given a measured gain\npred_interval = function(input){\n    transformed = sqrt(log(input))\n    output = predict(lm(density ~ sqrt_ln_gain, data = gauge), newdata=data.frame(sqrt_ln_gain = transformed), interval=\"prediction\")\n    return (c(output[2], output[3]))\n}","kernel":"ir","pos":33,"scrolled":true,"start":1590388549793,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549838,"exec_count":24,"id":"cdc17d","input":"pred_interval(426.7)","kernel":"ir","output":{"0":{"data":{"text/html":"<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>-0.0186563861101009</li><li>0.0296476689800717</li></ol>\n","text/latex":"\\begin{enumerate*}\n\\item -0.0186563861101009\n\\item 0.0296476689800717\n\\end{enumerate*}\n","text/markdown":"1. -0.0186563861101009\n2. 0.0296476689800717\n\n\n","text/plain":"[1] -0.01865639  0.02964767"}}},"pos":34,"start":1590388549819,"state":"done","type":"cell"}
{"cell_type":"code","end":1590388549900,"exec_count":25,"id":"057dc9","input":"pred_interval(38.6)","kernel":"ir","output":{"0":{"data":{"text/html":"<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>0.477417226998635</li><li>0.525323825940254</li></ol>\n","text/latex":"\\begin{enumerate*}\n\\item 0.477417226998635\n\\item 0.525323825940254\n\\end{enumerate*}\n","text/markdown":"1. 0.477417226998635\n2. 0.525323825940254\n\n\n","text/plain":"[1] 0.4774172 0.5253238"}}},"pos":35,"start":1590388549843,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"007a81","input":"My plan is to simulate a large number of times the following procedure:\n\n1. For each density value, vary the value by +\\- 10% (or some other value in the range with a uniform distribution)\n2. Fit the best line again and record the coefficients\n3. Plot the distributions of the coefficients and analyze\n4. ???\n5. Profit","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0527d8","input":"#### Below is the model we propose","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0ed0c8","input":"#### Best Fit Line","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4a8a78","input":"## Predicting","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4e4783","input":"Since the residuals still show a polynomial pattern, try cubic regression","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"738f79","input":"#### Imports","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"900ac4","input":"# HW 4","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"941a6e","input":"Since the residuals show a polynomial pattern, try doing polynomial regression","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bb3a70","input":"#### What if data was not reported accurately?","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c1e892","input":"#### Load Data","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dc1dcb","input":"Since the residuals still show a polynomial residuals graph, let's try exponential distribution","pos":14,"state":"done","type":"cell"}
{"id":0,"time":1590974091512,"type":"user"}
{"last_load":1590388222607,"type":"file"}